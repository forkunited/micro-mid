value maxThreads="30";
value debug=Debug();
value randomSeed=SetRandomSeed(seed="1");
context documentNLPBooleanCtx=DocumentNLPBoolean() {
	data positiveData = MIDRelevance(storage="MIDBson", collection="mid_news_rel_labeled_tokens", label="true");
	data negativeData = MIDRelevance(storage="MIDBson", collection="mid_news_rel_labeled_tokens", label="false");
	
	value positiveParition = PartitionData(data=${positiveData}, distribution=(".8", ".1", ".1"));
	value negativeParition = PartitionData(data=${negativeData}, distribution=(".8", ".1", ".1"));
	
	data trainData = UnionData(data=(${positiveData_0}));
	data devData = UnionData(data=(${positiveData_1}, ${negativeData_1}));
	data testData = UnionData(data=(${positiveData_2}, ${negativeData_2}));
	value smallTrainData = PartitionData(data=${trainData}, distribution=(".5", ".5"));


	value countPositiveData = SizeData(data=${positiveData});
	value countNegativeData = SizeData(data=${negativeData});
	value countTrainData = SizeData(data=${trainData});
	value countDevData = SizeData(data=${devData});
	value countTestData = SizeData(data=${testData});
	
	value debugPositiveData = OutputDebug(refs=(${countPositiveData}));
	value debugNegativeData = OutputDebug(refs=(${countNegativeData}));
	value debugTrainData = OutputDebug(refs=(${countTrainData}));
	value debugDevData = OutputDebug(refs=(${countDevData}));
	value debugTestData = OutputDebug(refs=(${countTestData}));
	
	value storeTrain = StoreData(storage="MIDBson", collection="mid_news_rel_train_data_small", data=${trainData_0});
	value storeDev = StoreData(storage="MIDBson", collection="mid_news_rel_dev_data_full", data=${devData});
	value storeTest = StoreData(storage="MIDBson", collection="mid_news_rel_test_data_full", data=${testData});
};
