context featureSetsRelevance = DocumentNLPBoolean(initScript="/relevance/featureSets/Unigram.ctx", initOnce="true", initOverrideByName="true");
context trainDevTestDataRelevance = DocumentNLPBoolean(initScript="/relevance/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");

data_features trainMatrix = DataFeatureMatrix(data=${trainDevTestDataRelevance.trainData}, features=${featureSetsRelevance.fs});
	
model m=LibSVM(positiveLabel="true", negativeLabel="false", svmType="ONE_CLASS", kernelType="LINEAR", nu="0.5")
{
	array validLabels=("true", "false");
};

evaluation modelF1=F(filterLabel="true", Beta="1");
classify_method modelMethod = SupervisedModel(model=${m}, data=${trainMatrix}, trainEvaluation=${modelF1});

search trr=Grid() {
	dimension nu=Enumerated(values=(".5", ".7", ".9", ".99"), stageIndex="0");
};

classify_eval devEval = F(task=${trainDevTestDataRelevance.devTask}, method=${modelMethod}, Beta="1", filterLabel="true");
classify_method methodFinal = RunClassifyMethodSearch(fn=${devEval}, search=${trr});
